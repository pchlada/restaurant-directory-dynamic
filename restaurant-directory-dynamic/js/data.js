// Data Management Module
class DataManager {
    constructor() {
        this.restaurants = [];
        this.areas = [];
        this.loaded = false;
    }

    async loadData() {
        try {
            const response = await fetch('data/restaurants.json');
            this.restaurants = await response.json();
            this.processAreas();
            this.loaded = true;
            return this.restaurants;
        } catch (error) {
            console.error('Error loading restaurant data:', error);
            throw error;
        }
    }

    processAreas() {
        const areaGroups = {
            'west-london': {
                name: 'West London',
                description: 'Notting Hill, Kensington & surrounding areas',
                icon: 'fas fa-crown',
                postcodes: ['W11', 'W8', 'W10', 'W2'],
                restaurants: []
            },
            'east-london': {
                name: 'East London', 
                description: 'Wanstead, Ilford, Woodford & Essex borders',
                icon: 'fas fa-city',
                postcodes: ['IG1', 'IG3', 'E11', 'E18'],
                restaurants: []
            },
            'north-london': {
                name: 'North London',
                description: 'Harringay, Green Lanes & Turkish quarter',
                icon: 'fas fa-mosque',
                postcodes: ['N4', 'N8', 'N15', 'N17', 'N22'],
                restaurants: []
            },            'enfield-outer': {
                name: 'Enfield & Outer North',
                description: 'Cockfosters, Enfield & northern suburbs',
                icon: 'fas fa-tree',
                postcodes: ['EN4'],
                restaurants: []
            },
            'romford-essex': {
                name: 'Romford & Essex',
                description: 'Family dining in Essex borders',
                icon: 'fas fa-home',
                postcodes: ['RM2', 'RM6'],
                restaurants: []
            },
            'other-areas': {
                name: 'Other Areas',
                description: 'Central & South London locations',
                icon: 'fas fa-map-marker-alt',
                postcodes: ['SE1', 'SW1', 'EC1', 'WC1'],
                restaurants: []
            }
        };

        // Assign restaurants to areas based on postcode
        this.restaurants.forEach((restaurant, index) => {
            restaurant.id = index;
            const postcode = this.extractPostcode(restaurant.full_address);
            let assigned = false;

            for (const [key, area] of Object.entries(areaGroups)) {
                if (area.postcodes.some(pc => postcode.startsWith(pc))) {
                    area.restaurants.push(restaurant);
                    assigned = true;
                    break;
                }
            }

            if (!assigned) {
                areaGroups['other-areas'].restaurants.push(restaurant);
            }
        });

        this.areas = Object.entries(areaGroups).map(([key, area]) => ({
            id: key,
            ...area
        }));
    }    extractPostcode(address) {
        if (!address) return '';
        const match = address.match(/([A-Z]+\d+)/);
        return match ? match[1] : '';
    }

    getRestaurantById(id) {
        return this.restaurants.find(r => r.id === parseInt(id));
    }

    getAreaById(id) {
        return this.areas.find(a => a.id === id);
    }

    getStats() {
        const totalRestaurants = this.restaurants.length;
        const totalAreas = this.areas.filter(a => a.restaurants.length > 0).length;
        const avgRating = this.restaurants.reduce((sum, r) => sum + (r.rating || 0), 0) / totalRestaurants;
        const totalReviews = this.restaurants.reduce((sum, r) => sum + (r.reviews_count || 0), 0);

        return {
            totalRestaurants,
            totalAreas,
            avgRating: avgRating.toFixed(1),
            totalReviews
        };
    }

    searchRestaurants(query) {
        if (!query) return this.restaurants;
        
        const searchTerm = query.toLowerCase();
        return this.restaurants.filter(restaurant => 
            restaurant.name.toLowerCase().includes(searchTerm) ||
            restaurant.type.toLowerCase().includes(searchTerm) ||
            restaurant.full_address.toLowerCase().includes(searchTerm)
        );
    }

    getColorTheme(index) {
        const themes = ['purple', 'red', 'blue', 'green', 'orange', 'navy'];
        return themes[index % themes.length];
    }
}

// Global instance
const dataManager = new DataManager();