// Template Engine Module
class TemplateEngine {
    
    // Homepage Template
    renderHomepage() {
        const stats = dataManager.getStats();
        
        return `
            <div class="hero-section">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-8 mx-auto text-center hero-content">
                            <h1>Discover Amazing Restaurants</h1>
                            <p class="lead">Find the perfect dining experience in London with our comprehensive restaurant directory</p>
                            
                            <div class="row justify-content-center mb-4">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <input type="text" id="searchInput" class="form-control search-box" 
                                               placeholder="Search restaurants, cuisine, location...">
                                        <button class="btn btn-light" onclick="performSearch()">
                                            <i class="fas fa-search"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="container my-5">
                <!-- Statistics Section -->
                <div class="stats-section mb-5">
                    <div class="row">
                        <div class="col-md-3 stat-item">
                            <div class="stat-number">${stats.totalRestaurants}+</div>
                            <h5>Restaurants</h5>
                            <p class="text-muted">Verified listings</p>
                        </div>
                        <div class="col-md-3 stat-item">
                            <div class="stat-number">${stats.totalAreas}</div>
                            <h5>Areas</h5>
                            <p class="text-muted">Across London</p>
                        </div>
                        <div class="col-md-3 stat-item">
                            <div class="stat-number">${stats.avgRating}★</div>
                            <h5>Average Rating</h5>
                            <p class="text-muted">Customer reviews</p>
                        </div>
                        <div class="col-md-3 stat-item">
                            <div class="stat-number">${this.formatNumber(stats.totalReviews)}+</div>
                            <h5>Reviews</h5>
                            <p class="text-muted">User feedback</p>
                        </div>
                    </div>
                </div>

                <!-- Areas Section -->
                <h2 class="text-center mb-4">Browse by Area</h2>
                <div class="row g-4">
                    ${dataManager.areas.map((area, index) => this.renderAreaCard(area, index)).join('')}
                </div>
            </div>
        `;
    }    // Area Card Template
    renderAreaCard(area, index) {
        const theme = dataManager.getColorTheme(index);
        
        return `
            <div class="col-md-6 col-lg-4">
                <div class="card area-card h-100 theme-${theme}">
                    <div class="card-body text-center">
                        <div class="area-icon mb-3">
                            <i class="${area.icon}"></i>
                        </div>
                        <h4 class="card-title">${area.name}</h4>
                        <p class="card-text">${area.description}</p>
                        <p class="card-text"><strong>${area.restaurants.length} restaurants</strong></p>
                        <a href="#/area/${area.id}" class="btn btn-light">
                            Explore Area <i class="fas fa-arrow-right ms-1"></i>
                        </a>
                    </div>
                </div>
            </div>
        `;
    }

    // Area Page Template
    renderAreaPage(areaId) {
        const area = dataManager.getAreaById(areaId);
        if (!area) return '<div class="container mt-5"><h2>Area not found</h2></div>';

        const theme = dataManager.getColorTheme(dataManager.areas.indexOf(area));
        
        return `
            <div class="area-header theme-${theme}">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-8">
                            <h1 class="display-4 fw-bold">${area.name}</h1>
                            <p class="lead">${area.description}</p>
                            <p class="mb-0">${area.restaurants.length} restaurants found</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="container my-5">
                <div class="row g-4">
                    ${area.restaurants.map((restaurant, index) => this.renderRestaurantCard(restaurant, index)).join('')}
                </div>
            </div>
        `;
    }    // Restaurant Card Template
    renderRestaurantCard(restaurant, index) {
        const theme = dataManager.getColorTheme(index);
        const stars = this.generateStars(restaurant.rating);
        
        const placeholderIconDiv = `<div class="card-img-top d-flex align-items-center justify-content-center" style="height: 200px; background-color: #e9ecef;"><i class="fas fa-utensils" style="font-size: 3rem; color: #6c757d;"></i></div>`;
        let finalImageHtml;

        if (restaurant.photo) {
            // Escape quotes and newlines for JS string literal in onerror
            const escapedPlaceholderIconDiv = placeholderIconDiv.replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/\n/g, "");
            const restaurantNameJsEscaped = restaurant.name ? restaurant.name.replace(/'/g, "\\'") : "this restaurant";
            finalImageHtml = `<img src="${restaurant.photo}" class="card-img-top" alt="${restaurant.name || 'Restaurant Image'}" style="height: 200px; object-fit: cover;" onerror="this.outerHTML = '${escapedPlaceholderIconDiv}'; console.warn('Image load failed for ${restaurantNameJsEscaped}:', this.src);">`;
        } else {
            finalImageHtml = placeholderIconDiv;
        }

        return `
            <div class="col-md-6 col-lg-4">
                <div class="card h-100">
                    ${finalImageHtml}
                    <div class="card-header theme-${theme}">
                        <h5 class="card-title text-white mb-0">${restaurant.name || 'N/A'}</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div class="rating">
                                ${stars}
                            </div>
                            <small class="text-muted">${restaurant.reviews_count || 0} reviews</small>
                        </div>
                        <p class="text-muted small mb-2">
                            <i class="fas fa-map-marker-alt me-1"></i>
                            ${restaurant.full_address || 'Address not available'}
                        </p>
                        <p class="text-muted small mb-3">
                            <i class="fas fa-utensils me-1"></i>
                            ${restaurant.type || 'Type not available'}
                        </p>
                    </div>
                    <div class="card-footer bg-transparent">
                        <a href="#/restaurant/${restaurant.id}" class="btn btn-primary w-100">
                            View Details <i class="fas fa-arrow-right ms-1"></i>
                        </a>
                    </div>
                </div>
            </div>
        `;
    }    // Restaurant Detail Page Template
    renderRestaurantDetail(restaurantId) {
        const restaurant = dataManager.getRestaurantById(restaurantId);
        if (!restaurant) return '<div class="container mt-5"><h2>Restaurant not found</h2></div>';

        const theme = dataManager.getColorTheme(restaurant.id);
        const stars = this.generateStars(restaurant.rating);

        return `
            <div class="restaurant-header theme-${theme}">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-8">
                            <h1 class="display-4 fw-bold mb-3">${restaurant.name}</h1>
                            <div class="d-flex align-items-center mb-3">
                                <div class="rating me-3">
                                    ${stars}
                                    <span class="ms-2 fs-5">${restaurant.rating || 'N/A'}</span>
                                </div>
                                <span class="badge bg-light text-dark">${restaurant.reviews_count || 0} reviews</span>
                            </div>
                            <p class="lead mb-2">
                                <i class="fas fa-utensils me-2"></i>
                                ${restaurant.type || 'Type not specified'}
                            </p>
                            <p class="mb-0">
                                <i class="fas fa-map-marker-alt me-2"></i>
                                ${restaurant.full_address || 'Address not available'}
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="container my-5">
                <div class="row">
                    <div class="col-lg-8">
                        ${this.renderPhotoGallery(restaurant)}
                        ${this.renderAboutSection(restaurant)}
                        ${this.renderReviewsSection(restaurant)}
                    </div>
                    <div class="col-lg-4">
                        ${this.renderContactSidebar(restaurant)}
                        ${this.renderHoursSection(restaurant)}
                    </div>
                </div>
            </div>
        `;
    }    // Photo Gallery Section
    renderPhotoGallery(restaurant) {
        let displayMainPhotoUrl = restaurant.photo;
        let displaySamplePhotos = Array.isArray(restaurant.photos_sample) ? [...restaurant.photos_sample] : [];

        if (displayMainPhotoUrl) {
            // Ensure the main photo isn't duplicated in thumbnails if it's also in photos_sample
            displaySamplePhotos = displaySamplePhotos.filter(p => p !== displayMainPhotoUrl);
        } else if (displaySamplePhotos.length > 0) {
            // If no primary 'photo', use the first from 'photos_sample' as main
            displayMainPhotoUrl = displaySamplePhotos.shift(); 
        }
        
        // Limit to a max of 4 additional thumbnails
        displaySamplePhotos = displaySamplePhotos.slice(0, 4);

        const noPhotosMessage = `<div class="card mb-4"><div class="card-body text-center p-5"><i class="fas fa-camera display-3 text-muted mb-3"></i><h5 class="text-muted">No photos available for ${restaurant.name || 'this restaurant'}</h5></div></div>`;

        if (!displayMainPhotoUrl && displaySamplePhotos.length === 0) {
            return noPhotosMessage;
        }

        const mainPhotoHtml = displayMainPhotoUrl
            ? `<img src="${displayMainPhotoUrl}" class="img-fluid w-100" alt="${restaurant.name || ''} main" style="height: 300px; object-fit: cover;" onerror="this.outerHTML = '<div style=\'height:300px; display:flex; align-items:center; justify-content:center; background-color:#f0f0f0; color: #dc3545;\'><p class=\'text-center p-3\'>Main image could not be loaded.</p></div>';">`
            : `<div style="height: 300px; display:flex; align-items:center; justify-content:center; background-color:#e9ecef;"><p class="text-muted">Main photo unavailable</p></div>`; // Fallback if main photo URL was initially null/undefined

        const additionalPhotosHtml = displaySamplePhotos.map((photo, index) => `
            <div class="col-6">
                <img src="${photo}" class="img-fluid w-100" alt="${restaurant.name || ''} thumbnail ${index + 1}" style="height: 150px; object-fit: cover;" onerror="this.outerHTML = '<div style=\'height:150px; display:flex; align-items-center; justify-content:center; background-color:#f8f9fa; color: #dc3545;\'><p class=\'small text-center p-1\'>Thumbnail failed</p></div>';">
            </div>
        `).join('');

        return `
            <div class="card mb-4">
                <div class="card-header">
                    <h4 class="mb-0"><i class="fas fa-camera me-2"></i>Photos</h4>
                </div>
                <div class="card-body p-0">
                    <div class="row g-0">
                        <div class="col-md-8">
                            ${mainPhotoHtml}
                        </div>
                        ${additionalPhotosHtml.length > 0 ? `<div class="col-md-4"><div class="row g-0">${additionalPhotosHtml}</div></div>` : (displayMainPhotoUrl ? '' : '<div class="col-md-4 d-flex align-items-center justify-content-center" style="height:300px; background-color:#e9ecef;"><p class="text-muted text-center p-3 small">No additional thumbnails.</p></div>')}
                    </div>
                </div>
            </div>
        `;
    }    // About Section
    renderAboutSection(restaurant) {
        const areaName = this.extractArea(restaurant.full_address);
        return `
            <div class="card mb-4">
                <div class="card-header">
                    <h4 class="mb-0"><i class="fas fa-info-circle me-2"></i>About ${restaurant.name}</h4>
                </div>
                <div class="card-body">
                    <p class="mb-3">Welcome to ${restaurant.name}, a premier ${restaurant.type ? restaurant.type.toLowerCase() : 'dining destination'} located in ${areaName ? 'the heart of ' + areaName : 'a prime London location'}.</p>
                    <p class="mb-3">${restaurant.description || 'Our establishment offers an authentic dining experience with carefully crafted dishes.'}</p>
                    <div class="row">
                        <div class="col-sm-6">
                            <h6><i class="fas fa-utensils me-2"></i>Cuisine</h6>
                            <p class="text-muted">${restaurant.type || 'Varied'}</p>
                        </div>
                        <div class="col-sm-6">
                            <h6><i class="fas fa-star me-2"></i>Rating</h6>
                            <p class="text-muted">${restaurant.rating || 'N/A'}/5 (${restaurant.reviews_count || 0} reviews)</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // Contact Sidebar
    renderContactSidebar(restaurant) {
        return `
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-address-book me-2"></i>Contact Info</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6><i class="fas fa-map-marker-alt me-2"></i>Address</h6>
                        <p class="text-muted small">${restaurant.full_address || 'Not available'}</p>
                    </div>
                    
                    <div class="mb-3">
                        <h6><i class="fas fa-phone me-2"></i>Phone</h6>
                        <p class="text-muted">${restaurant.phone || 'Not available'}</p>
                    </div>
                    
                    <div class="mb-3">
                        <h6><i class="fas fa-globe me-2"></i>Website</h6>
                        ${restaurant.website ? `<a href="${restaurant.website.startsWith('http') ? restaurant.website : 'http://' + restaurant.website}" target="_blank" class="text-muted text-break">${restaurant.website}</a>` : '<p class="text-muted">Not available</p>'}
                    </div>
                    
                    <hr>
                    ${restaurant.phone ? `<a href="tel:${restaurant.phone}" class="btn btn-primary w-100 mb-2"><i class="fas fa-phone me-2"></i>Call Now</a>` : ''}
                    ${restaurant.full_address ? `<a href="https://maps.google.com?q=${encodeURIComponent(restaurant.full_address)}" target="_blank" class="btn btn-outline-primary w-100"><i class="fas fa-directions me-2"></i>Get Directions</a>` : ''}
                </div>
            </div>
        `;
    }    // Hours Section
    renderHoursSection(restaurant) {
        let hoursHtml = '<p class="text-muted">Working hours not available.</p>';
        if (restaurant.working_hours && typeof restaurant.working_hours === 'object' && Object.keys(restaurant.working_hours).length > 0) {
            const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            hoursHtml = days.map(day => {
                const time = restaurant.working_hours[day] || 'Closed';
                return `
                    <div class="d-flex justify-content-between py-1">
                        <span>${day}</span>
                        <span class="text-muted">${time}</span>
                    </div>
                `;
            }).join('');
        }

        return `
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Hours</h5>
                </div>
                <div class="card-body">
                    ${hoursHtml}
                </div>
            </div>
        `;
    }    // Reviews Section
    renderReviewsSection(restaurant) {
        const rating = restaurant.rating || 0; 

        return `
            <div class="card mb-4">
                <div class="card-header">
                    <h4 class="mb-0"><i class="fas fa-star me-2"></i>Customer Reviews</h4>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-4 text-center">
                            <div class="display-4 fw-bold">${rating > 0 ? rating.toFixed(1) : 'N/A'}</div>
                            <div class="rating mb-2">
                                ${this.generateStars(rating)}
                            </div>
                            <p class="text-muted">${restaurant.reviews_count || 0} reviews</p>
                        </div>
                        <div class="col-md-8">
                            ${this.renderRatingBreakdown(restaurant)}
                        </div>
                    </div>
                    
                    <div class="review-item border-bottom py-3">
                        <div class="d-flex align-items-center mb-2">
                            <div class="avatar me-3">JD</div>
                            <div>
                                <h6 class="mb-0">John Doe</h6>
                                <div class="rating small">${this.generateStars(5)}</div>
                            </div>
                        </div>
                        <p class="mb-2">Excellent food and service! The atmosphere was perfect for our anniversary dinner. Highly recommended!</p>
                        <small class="text-muted">2 weeks ago</small>
                    </div>
                    
                    <div class="review-item py-3">
                        <div class="d-flex align-items-center mb-2">
                            <div class="avatar me-3">SM</div>
                            <div>
                                <h6 class="mb-0">Sarah Mitchell</h6>
                                <div class="rating small">${this.generateStars(4)}</div>
                            </div>
                        </div>
                        <p class="mb-2">Great authentic flavors and generous portions. The staff was very friendly and accommodating.</p>
                        <small class="text-muted">1 month ago</small>
                    </div>
                </div>
            </div>
        `;
    }    // Rating Breakdown
    renderRatingBreakdown(restaurant) {
        const perScore = restaurant.reviews_per_score; 
        const totalReviews = restaurant.reviews_count || 1;
        const ratingValue = parseFloat(restaurant.rating) || 0;

        let breakdownHtml = '';
        for (let i = 5; i >= 1; i--) {
            const count = perScore && perScore[i] !== undefined ? Math.round(perScore[i]) : this.getReviewCount(i, totalReviews, ratingValue);
            const percentage = totalReviews > 0 ? ((count / totalReviews) * 100).toFixed(0) : this.getReviewPercentage(i, ratingValue);
            
            breakdownHtml += `
                <div class="d-flex align-items-center mb-1">
                    <span class="me-2 small">${i} <i class="fas fa-star text-warning"></i></span>
                    <div class="progress flex-grow-1 me-2" style="height: 8px;">
                        <div class="progress-bar bg-warning" style="width: ${percentage}%" role="progressbar" aria-valuenow="${percentage}" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                    <small class="text-muted" style="width: 30px; text-align: right;">${count}</small>
                </div>
            `;
        }
        return `<div class="rating-breakdown">${breakdownHtml}</div>`;
    }    // Search Results Template
    renderSearchResults(query, results) {
        if (results.length === 0) {
            return `
                <div class="container my-5 text-center">
                    <i class="fas fa-search display-4 text-muted mb-3"></i>
                    <h2>No restaurants found</h2>
                    <p class="text-muted">No restaurants match your search for "${query}". Try different keywords.</p>
                    <a href="#/" class="btn btn-primary">Browse All Restaurants</a>
                </div>
            `;
        }

        return `
            <div class="container my-5">
                <h2 class="mb-4">Search Results for "${query}"</h2>
                <p class="text-muted mb-4">Found ${results.length} restaurant${results.length !== 1 ? 's' : ''}</p>
                <div class="row g-4">
                    ${results.map((restaurant, index) => this.renderRestaurantCard(restaurant, index)).join('')}
                </div>
            </div>
        `;
    }

    // Utility Methods
    generateStars(rating) {
        rating = parseFloat(rating) || 0;
        let starsHtml = '';
        for (let i = 1; i <= 5; i++) {
            if (rating >= i) {
                starsHtml += '<i class="fas fa-star"></i>'; // Full star
            } else if (rating >= i - 0.75) { // Adjusted threshold for full star if close
                starsHtml += '<i class="fas fa-star"></i>';
            } else if (rating >= i - 0.5) {
                starsHtml += '<i class="fas fa-star-half-alt"></i>'; // Half star
            } else if (rating >= i - 0.25) { // Adjusted threshold for half star if close
                 starsHtml += '<i class="fas fa-star-half-alt"></i>';
            }
             else {
                starsHtml += '<i class="far fa-star"></i>'; // Empty star
            }
        }
        return starsHtml;
    }

    formatNumber(num) {
        if (num === null || num === undefined) return '0';
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'k';
        return num.toString();
    }

    extractArea(address) {
        if (!address) return 'London';
        const parts = address.split(',');
        if (parts.length > 2) return parts[parts.length - 2].trim();
        if (parts.length > 1) return parts[0].trim(); 
        return address.trim();
    }

    getReviewPercentage(stars, rating) {
        rating = parseFloat(rating) || 0;
        if (stars === Math.round(rating)) return Math.floor(Math.random() * 20 + 50);
        if (stars === Math.floor(rating) || stars === Math.ceil(rating)) return Math.floor(Math.random() * 15 + 20);
        return Math.floor(Math.random() * 10 + 5);
    }

    getReviewCount(stars, totalReviews, overallRating) {
         totalReviews = totalReviews || 1; // Ensure not zero
        overallRating = overallRating || 3; // Default if no rating
        // Simple distribution: higher stars get more if rating is high, lower stars get more if rating is low.
        let basePercentage = 0.1; // Base for less likely stars
        if (stars === Math.round(overallRating)) {
            basePercentage = 0.4; // Most likely star
        } else if (Math.abs(stars - overallRating) === 1) {
            basePercentage = 0.2; // Next likely
        }
        return Math.max(0, Math.floor(basePercentage * totalReviews + (Math.random() - 0.5) * (0.1 * totalReviews) )); // Add some randomness
    }
}

// Global instance
const templateEngine = new TemplateEngine();