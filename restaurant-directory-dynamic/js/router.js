// Router Module for SPA Navigation
class Router {
    constructor() {
        this.routes = {
            '': this.showHomepage.bind(this),
            'areas': this.showAreasPage.bind(this),
            'area/:id': this.showAreaPage.bind(this),
            'restaurant/:id': this.showRestaurantPage.bind(this),
            'search/:query': this.showSearchResults.bind(this)
        };
        
        this.init();
    }

    init() {
        // Listen for hash changes
        window.addEventListener('hashchange', () => {
            this.handleRoute();
        });

        // Handle initial load
        this.handleRoute();
    }

    handleRoute() {
        const hash = window.location.hash.slice(1) || '';
        const path = hash.startsWith('/') ? hash.slice(1) : hash;
        
        // Show loading spinner
        this.showLoading(true);
        
        // Find matching route
        let routeFound = false;
        
        for (const [pattern, handler] of Object.entries(this.routes)) {
            const params = this.matchRoute(pattern, path);
            if (params !== null) {
                handler(params);
                routeFound = true;
                break;
            }
        }
        
        if (!routeFound) {
            this.show404();
        }        
        // Update navigation state
        this.updateNavigation(path);
        
        // Hide loading spinner
        setTimeout(() => this.showLoading(false), 100);
    }

    matchRoute(pattern, path) {
        if (pattern === path) return {};
        
        const patternParts = pattern.split('/');
        const pathParts = path.split('/');
        
        if (patternParts.length !== pathParts.length) return null;
        
        const params = {};
        
        for (let i = 0; i < patternParts.length; i++) {
            if (patternParts[i].startsWith(':')) {
                const paramName = patternParts[i].slice(1);
                params[paramName] = pathParts[i];
            } else if (patternParts[i] !== pathParts[i]) {
                return null;
            }
        }
        
        return params;
    }

    showHomepage() {
        document.getElementById('content').innerHTML = templateEngine.renderHomepage();
        document.title = 'Restaurant Directory - Home';
    }

    showAreasPage() {
        window.location.hash = '#/';
    }

    showAreaPage(params) {
        document.getElementById('content').innerHTML = templateEngine.renderAreaPage(params.id);
        const area = dataManager.getAreaById(params.id);
        document.title = `${area ? area.name : 'Area'} - Restaurant Directory`;
    }

    showRestaurantPage(params) {
        document.getElementById('content').innerHTML = templateEngine.renderRestaurantDetail(params.id);
        const restaurant = dataManager.getRestaurantById(params.id);
        document.title = `${restaurant ? restaurant.name : 'Restaurant'} - Restaurant Directory`;
    }    showSearchResults(params) {
        const query = decodeURIComponent(params.query);
        const results = dataManager.searchRestaurants(query);
        
        const html = `
            <div class="container my-5">
                <h2>Search Results for "${query}"</h2>
                <p class="text-muted mb-4">Found ${results.length} restaurants</p>
                <div class="row g-4">
                    ${results.map((restaurant, index) => templateEngine.renderRestaurantCard(restaurant, index)).join('')}
                </div>
            </div>
        `;
        
        document.getElementById('content').innerHTML = html;
        document.title = `Search: ${query} - Restaurant Directory`;
    }

    show404() {
        document.getElementById('content').innerHTML = `
            <div class="container my-5 text-center">
                <h1 class="display-1">404</h1>
                <h2>Page Not Found</h2>
                <p class="text-muted">The page you're looking for doesn't exist.</p>
                <a href="#/" class="btn btn-primary">Go Home</a>
            </div>
        `;
        document.title = '404 - Page Not Found';
    }

    updateNavigation(path) {
        const backBtn = document.getElementById('backBtn');
        if (path && path !== '') {
            backBtn.classList.remove('d-none');
        } else {
            backBtn.classList.add('d-none');
        }
    }

    showLoading(show) {
        const loading = document.getElementById('loading');
        if (loading) {
            if (show) {
                loading.style.display = 'flex';
                loading.classList.remove('d-none');
            } else {
                loading.style.display = 'none';
                loading.classList.add('d-none');
            }
        }
    }
}

// Navigation functions
function goBack() {
    window.history.back();
}

function performSearch() {
    const searchInput = document.getElementById('searchInput');
    const query = searchInput.value.trim();
    if (query) {
        window.location.hash = `#/search/${encodeURIComponent(query)}`;
    }
}

// Global instance
const router = new Router();